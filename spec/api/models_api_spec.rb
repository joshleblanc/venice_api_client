=begin
#Venice.ai API

#The Venice.ai API.

OpenAPI spec version: 20250521.233203

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.68
=end

require "spec_helper"
require "json"

# Unit tests for VeniceClient::ModelsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe "ModelsApi" do
  before do
    # run before each test
    @instance = VeniceClient::ModelsApi.new
  end

  after do
    # run after each test
  end

  describe "test an instance of ModelsApi" do
    it "should create an instance of ModelsApi" do
      expect(@instance).to be_instance_of(VeniceClient::ModelsApi)
    end
  end

  # unit tests for list_model_compatibility_mapping
  # /api/v1/models/compatibility_mapping
  # Returns a list of model compatibility mappings and the associated model.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :type
  # @return [InlineResponse2006]
  describe "list_model_compatibility_mapping test" do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_model_traits
  # /api/v1/models/traits
  # Returns a list of model traits and the associated model.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :type
  # @return [InlineResponse2005]
  describe "list_model_traits test" do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_models
  # /api/v1/models
  # Returns a list of available models supported by the Venice.ai API for both text and image inference.
  # @param [Hash] opts the optional parameters
  # @option opts [Type] :type
  # @return [InlineResponse2004]
  describe "list_models test" do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end
end
