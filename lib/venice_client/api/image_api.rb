=begin
#Venice.ai API

#The Venice.ai API.

OpenAPI spec version: 20250521.233203

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.68
=end

module VeniceClient
  class ImageApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # /api/v1/image/generate
    # Generate an image based on input parameters
    # @param [Hash] opts the optional parameters
    # @option opts [GenerateImageRequest] :body 
    # @option opts [String] :accept_encoding Supported compression encodings (gzip, br). Only applied when return_binary is false.
    # @return [InlineResponse2001]
    def generate_image(opts = {})
      data, _status_code, _headers = generate_image_with_http_info(opts)
      data
    end

    # /api/v1/image/generate
    # Generate an image based on input parameters
    # @param [Hash] opts the optional parameters
    # @option opts [GenerateImageRequest] :body 
    # @option opts [String] :accept_encoding Supported compression encodings (gzip, br). Only applied when return_binary is false.
    # @return [Array<(InlineResponse2001, Integer, Hash)>] InlineResponse2001 data, response status code and response headers
    def generate_image_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageApi.generate_image ...'
      end
      # resource path
      local_var_path = '/image/generate'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'image/jpeg', 'image/png', 'image/webp'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept-Encoding'] = opts[:'accept_encoding'] if !opts[:'accept_encoding'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'InlineResponse2001' 

      auth_names = opts[:auth_names] || ['BearerAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageApi#generate_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # /api/v1/image/styles
    # List available image styles that can be used with the generate API.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2003]
    def image_styles_get(opts = {})
      data, _status_code, _headers = image_styles_get_with_http_info(opts)
      data
    end

    # /api/v1/image/styles
    # List available image styles that can be used with the generate API.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2003, Integer, Hash)>] InlineResponse2003 data, response status code and response headers
    def image_styles_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageApi.image_styles_get ...'
      end
      # resource path
      local_var_path = '/image/styles'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse2003' 

      auth_names = opts[:auth_names] || ['BearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageApi#image_styles_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # /api/v1/image/generations
    # Generate an image based on input parameters using an OpenAI compatible endpoint. This endpoint does not support the full feature set of the Venice Image Generation endpoint, but is compatible with the existing OpenAI endpoint.
    # @param [Hash] opts the optional parameters
    # @option opts [SimpleGenerateImageRequest] :body 
    # @option opts [String] :accept_encoding Supported compression encodings (gzip, br).
    # @return [InlineResponse2002]
    def simple_generate_image(opts = {})
      data, _status_code, _headers = simple_generate_image_with_http_info(opts)
      data
    end

    # /api/v1/image/generations
    # Generate an image based on input parameters using an OpenAI compatible endpoint. This endpoint does not support the full feature set of the Venice Image Generation endpoint, but is compatible with the existing OpenAI endpoint.
    # @param [Hash] opts the optional parameters
    # @option opts [SimpleGenerateImageRequest] :body 
    # @option opts [String] :accept_encoding Supported compression encodings (gzip, br).
    # @return [Array<(InlineResponse2002, Integer, Hash)>] InlineResponse2002 data, response status code and response headers
    def simple_generate_image_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageApi.simple_generate_image ...'
      end
      # resource path
      local_var_path = '/images/generations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept-Encoding'] = opts[:'accept_encoding'] if !opts[:'accept_encoding'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'InlineResponse2002' 

      auth_names = opts[:auth_names] || ['BearerAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageApi#simple_generate_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # /api/v1/image/upscale
    # Upscale or enhance an image based on the supplied parameters. Using a scale of 1 with enhance enabled will only run the enhancer. The image can be provided either as a multipart form-data file upload or as a base64-encoded string in a JSON request.
    # @param [Hash] opts the optional parameters
    # @option opts [UpscaleImageRequest] :body 
    # @return [String]
    def upscale_image(opts = {})
      data, _status_code, _headers = upscale_image_with_http_info(opts)
      data
    end

    # /api/v1/image/upscale
    # Upscale or enhance an image based on the supplied parameters. Using a scale of 1 with enhance enabled will only run the enhancer. The image can be provided either as a multipart form-data file upload or as a base64-encoded string in a JSON request.
    # @param [Hash] opts the optional parameters
    # @option opts [UpscaleImageRequest] :body 
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def upscale_image_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageApi.upscale_image ...'
      end
      # resource path
      local_var_path = '/image/upscale'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['image/png', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['enhance'] = opts[:'enhance'] if !opts[:'enhance'].nil?
      form_params['enhanceCreativity'] = opts[:'enhance_creativity'] if !opts[:'enhance_creativity'].nil?
      form_params['enhancePrompt'] = opts[:'enhance_prompt'] if !opts[:'enhance_prompt'].nil?
      form_params['image'] = opts[:'image'] if !opts[:'image'].nil?
      form_params['replication'] = opts[:'replication'] if !opts[:'replication'].nil?
      form_params['scale'] = opts[:'scale'] if !opts[:'scale'].nil?

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || ['BearerAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageApi#upscale_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # /api/v1/image/upscale
    # Upscale or enhance an image based on the supplied parameters. Using a scale of 1 with enhance enabled will only run the enhancer. The image can be provided either as a multipart form-data file upload or as a base64-encoded string in a JSON request.
    # @param [Hash] opts the optional parameters
    # @option opts [] :enhance 
    # @option opts [BigDecimal] :enhance_creativity 
    # @option opts [String] :enhance_prompt 
    # @option opts [] :image 
    # @option opts [BigDecimal] :replication 
    # @option opts [BigDecimal] :scale 
    # @return [String]
    def upscale_image(opts = {})
      data, _status_code, _headers = upscale_image_with_http_info(opts)
      data
    end

    # /api/v1/image/upscale
    # Upscale or enhance an image based on the supplied parameters. Using a scale of 1 with enhance enabled will only run the enhancer. The image can be provided either as a multipart form-data file upload or as a base64-encoded string in a JSON request.
    # @param [Hash] opts the optional parameters
    # @option opts [] :enhance 
    # @option opts [BigDecimal] :enhance_creativity 
    # @option opts [String] :enhance_prompt 
    # @option opts [] :image 
    # @option opts [BigDecimal] :replication 
    # @option opts [BigDecimal] :scale 
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def upscale_image_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageApi.upscale_image ...'
      end
      # resource path
      local_var_path = '/image/upscale'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['image/png', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['enhance'] = opts[:'enhance'] if !opts[:'enhance'].nil?
      form_params['enhanceCreativity'] = opts[:'enhance_creativity'] if !opts[:'enhance_creativity'].nil?
      form_params['enhancePrompt'] = opts[:'enhance_prompt'] if !opts[:'enhance_prompt'].nil?
      form_params['image'] = opts[:'image'] if !opts[:'image'].nil?
      form_params['replication'] = opts[:'replication'] if !opts[:'replication'].nil?
      form_params['scale'] = opts[:'scale'] if !opts[:'scale'].nil?

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || ['BearerAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageApi#upscale_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
