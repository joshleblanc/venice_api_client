=begin
#Venice.ai API

#The Venice.ai API.

OpenAPI spec version: 20250521.233203

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.68
=end

module VeniceClient
  class APIKeysApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # /api/v1/api_keys
    # Create a new API key.
    # @param [Hash] opts the optional parameters
    # @option opts [ApiKeysBody] :body 
    # @return [InlineResponse2008]
    def create_api_key(opts = {})
      data, _status_code, _headers = create_api_key_with_http_info(opts)
      data
    end

    # /api/v1/api_keys
    # Create a new API key.
    # @param [Hash] opts the optional parameters
    # @option opts [ApiKeysBody] :body 
    # @return [Array<(InlineResponse2008, Integer, Hash)>] InlineResponse2008 data, response status code and response headers
    def create_api_key_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: APIKeysApi.create_api_key ...'
      end
      # resource path
      local_var_path = '/api_keys'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'InlineResponse2008' 

      auth_names = opts[:auth_names] || ['BearerAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: APIKeysApi#create_api_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # /api/v1/api_keys
    # Delete an API key.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id The ID of the API key to delete
    # @return [InlineResponse2009]
    def delete_api_key(opts = {})
      data, _status_code, _headers = delete_api_key_with_http_info(opts)
      data
    end

    # /api/v1/api_keys
    # Delete an API key.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id The ID of the API key to delete
    # @return [Array<(InlineResponse2009, Integer, Hash)>] InlineResponse2009 data, response status code and response headers
    def delete_api_key_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: APIKeysApi.delete_api_key ...'
      end
      # resource path
      local_var_path = '/api_keys'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse2009' 

      auth_names = opts[:auth_names] || ['BearerAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: APIKeysApi#delete_api_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # /api/v1/api_keys/generate_web3_key
    # Returns the token required to generate an API key via a wallet.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20012]
    def get_api_key_generate_web3_key(opts = {})
      data, _status_code, _headers = get_api_key_generate_web3_key_with_http_info(opts)
      data
    end

    # /api/v1/api_keys/generate_web3_key
    # Returns the token required to generate an API key via a wallet.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20012, Integer, Hash)>] InlineResponse20012 data, response status code and response headers
    def get_api_key_generate_web3_key_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: APIKeysApi.get_api_key_generate_web3_key ...'
      end
      # resource path
      local_var_path = '/api_keys/generate_web3_key'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse20012' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: APIKeysApi#get_api_key_generate_web3_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # /api/v1/api_keys/rate_limits/log
    # Returns the last 50 rate limits that the account exceeded.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20011]
    def get_api_key_rate_limit_logs(opts = {})
      data, _status_code, _headers = get_api_key_rate_limit_logs_with_http_info(opts)
      data
    end

    # /api/v1/api_keys/rate_limits/log
    # Returns the last 50 rate limits that the account exceeded.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20011, Integer, Hash)>] InlineResponse20011 data, response status code and response headers
    def get_api_key_rate_limit_logs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: APIKeysApi.get_api_key_rate_limit_logs ...'
      end
      # resource path
      local_var_path = '/api_keys/rate_limits/log'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse20011' 

      auth_names = opts[:auth_names] || ['BearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: APIKeysApi#get_api_key_rate_limit_logs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # /api/v1/api_keys/rate_limits
    # Return details about user balances and rate limits.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20010]
    def get_api_key_rate_limits(opts = {})
      data, _status_code, _headers = get_api_key_rate_limits_with_http_info(opts)
      data
    end

    # /api/v1/api_keys/rate_limits
    # Return details about user balances and rate limits.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20010, Integer, Hash)>] InlineResponse20010 data, response status code and response headers
    def get_api_key_rate_limits_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: APIKeysApi.get_api_key_rate_limits ...'
      end
      # resource path
      local_var_path = '/api_keys/rate_limits'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse20010' 

      auth_names = opts[:auth_names] || ['BearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: APIKeysApi#get_api_key_rate_limits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # /api/v1/api_keys
    # Return a list of API keys.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2007]
    def get_api_keys(opts = {})
      data, _status_code, _headers = get_api_keys_with_http_info(opts)
      data
    end

    # /api/v1/api_keys
    # Return a list of API keys.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2007, Integer, Hash)>] InlineResponse2007 data, response status code and response headers
    def get_api_keys_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: APIKeysApi.get_api_keys ...'
      end
      # resource path
      local_var_path = '/api_keys'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse2007' 

      auth_names = opts[:auth_names] || ['BearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: APIKeysApi#get_api_keys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # /api/v1/api_keys/generate_web3_key
    # Authenticates a wallet holding sVVV and creates an API key.
    # @param [Hash] opts the optional parameters
    # @option opts [ApiKeysGenerateWeb3KeyBody] :body 
    # @return [InlineResponse2008]
    def post_api_key_generate_web3_key(opts = {})
      data, _status_code, _headers = post_api_key_generate_web3_key_with_http_info(opts)
      data
    end

    # /api/v1/api_keys/generate_web3_key
    # Authenticates a wallet holding sVVV and creates an API key.
    # @param [Hash] opts the optional parameters
    # @option opts [ApiKeysGenerateWeb3KeyBody] :body 
    # @return [Array<(InlineResponse2008, Integer, Hash)>] InlineResponse2008 data, response status code and response headers
    def post_api_key_generate_web3_key_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: APIKeysApi.post_api_key_generate_web3_key ...'
      end
      # resource path
      local_var_path = '/api_keys/generate_web3_key'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'InlineResponse2008' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: APIKeysApi#post_api_key_generate_web3_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
