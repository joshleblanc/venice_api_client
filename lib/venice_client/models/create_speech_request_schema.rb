=begin
#Venice.ai API

#The Venice.ai API.

OpenAPI spec version: 20250521.233203

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.68
=end

require 'date'

module VeniceClient
  # Request to generate audio from text.
  class CreateSpeechRequestSchema
    # The text to generate audio for. The maximum length is 4096 characters.
    attr_accessor :input

    # The model ID of a Venice TTS model.
    attr_accessor :model

    # The format to audio in.
    attr_accessor :response_format

    # The speed of the generated audio. Select a value from 0.25 to 4.0. 1.0 is the default.
    attr_accessor :speed

    # Should the content stream back sentence by sentence or be processed and returned as a complete audio file.
    attr_accessor :streaming

    # The voice to use when generating the audio.
    attr_accessor :voice

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'input' => :'input',
        :'model' => :'model',
        :'response_format' => :'response_format',
        :'speed' => :'speed',
        :'streaming' => :'streaming',
        :'voice' => :'voice'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'input' => :'Object',
        :'model' => :'Object',
        :'response_format' => :'Object',
        :'speed' => :'Object',
        :'streaming' => :'Object',
        :'voice' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `VeniceClient::CreateSpeechRequestSchema` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `VeniceClient::CreateSpeechRequestSchema`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'input')
        self.input = attributes[:'input']
      end

      if attributes.key?(:'model')
        self.model = attributes[:'model']
      else
        self.model = 'tts-kokoro'
      end

      if attributes.key?(:'response_format')
        self.response_format = attributes[:'response_format']
      else
        self.response_format = 'mp3'
      end

      if attributes.key?(:'speed')
        self.speed = attributes[:'speed']
      else
        self.speed = 1
      end

      if attributes.key?(:'streaming')
        self.streaming = attributes[:'streaming']
      else
        self.streaming = false
      end

      if attributes.key?(:'voice')
        self.voice = attributes[:'voice']
      else
        self.voice = 'af_sky'
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @input.nil?
        invalid_properties.push('invalid value for "input", input cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @input.nil?
      model_validator = EnumAttributeValidator.new('Object', ['tts-kokoro'])
      return false unless model_validator.valid?(@model)
      response_format_validator = EnumAttributeValidator.new('Object', ['mp3', 'opus', 'aac', 'flac', 'wav', 'pcm'])
      return false unless response_format_validator.valid?(@response_format)
      voice_validator = EnumAttributeValidator.new('Object', ['af_alloy', 'af_aoede', 'af_bella', 'af_heart', 'af_jadzia', 'af_jessica', 'af_kore', 'af_nicole', 'af_nova', 'af_river', 'af_sarah', 'af_sky', 'am_adam', 'am_echo', 'am_eric', 'am_fenrir', 'am_liam', 'am_michael', 'am_onyx', 'am_puck', 'am_santa', 'bf_alice', 'bf_emma', 'bf_lily', 'bm_daniel', 'bm_fable', 'bm_george', 'bm_lewis', 'zf_xiaobei', 'zf_xiaoni', 'zf_xiaoxiao', 'zf_xiaoyi', 'zm_yunjian', 'zm_yunxi', 'zm_yunxia', 'zm_yunyang', 'ff_siwis', 'hf_alpha', 'hf_beta', 'hm_omega', 'hm_psi', 'if_sara', 'im_nicola', 'jf_alpha', 'jf_gongitsune', 'jf_nezumi', 'jf_tebukuro', 'jm_kumo', 'pf_dora', 'pm_alex', 'pm_santa', 'ef_dora', 'em_alex', 'em_santa'])
      return false unless voice_validator.valid?(@voice)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] model Object to be assigned
    def model=(model)
      validator = EnumAttributeValidator.new('Object', ['tts-kokoro'])
      unless validator.valid?(model)
        fail ArgumentError, "invalid value for \"model\", must be one of #{validator.allowable_values}."
      end
      @model = model
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] response_format Object to be assigned
    def response_format=(response_format)
      validator = EnumAttributeValidator.new('Object', ['mp3', 'opus', 'aac', 'flac', 'wav', 'pcm'])
      unless validator.valid?(response_format)
        fail ArgumentError, "invalid value for \"response_format\", must be one of #{validator.allowable_values}."
      end
      @response_format = response_format
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] voice Object to be assigned
    def voice=(voice)
      validator = EnumAttributeValidator.new('Object', ['af_alloy', 'af_aoede', 'af_bella', 'af_heart', 'af_jadzia', 'af_jessica', 'af_kore', 'af_nicole', 'af_nova', 'af_river', 'af_sarah', 'af_sky', 'am_adam', 'am_echo', 'am_eric', 'am_fenrir', 'am_liam', 'am_michael', 'am_onyx', 'am_puck', 'am_santa', 'bf_alice', 'bf_emma', 'bf_lily', 'bm_daniel', 'bm_fable', 'bm_george', 'bm_lewis', 'zf_xiaobei', 'zf_xiaoni', 'zf_xiaoxiao', 'zf_xiaoyi', 'zm_yunjian', 'zm_yunxi', 'zm_yunxia', 'zm_yunyang', 'ff_siwis', 'hf_alpha', 'hf_beta', 'hm_omega', 'hm_psi', 'if_sara', 'im_nicola', 'jf_alpha', 'jf_gongitsune', 'jf_nezumi', 'jf_tebukuro', 'jm_kumo', 'pf_dora', 'pm_alex', 'pm_santa', 'ef_dora', 'em_alex', 'em_santa'])
      unless validator.valid?(voice)
        fail ArgumentError, "invalid value for \"voice\", must be one of #{validator.allowable_values}."
      end
      @voice = voice
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          input == o.input &&
          model == o.model &&
          response_format == o.response_format &&
          speed == o.speed &&
          streaming == o.streaming &&
          voice == o.voice
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [input, model, response_format, speed, streaming, voice].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        VeniceClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
